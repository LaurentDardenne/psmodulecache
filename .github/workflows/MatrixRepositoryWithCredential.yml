name: MatrixRepositoryWithCredential

on:
  workflow_dispatch:

jobs:
  MatrixRepositoryWithCredential:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2

      - name: Set Required repositories PS Core
        shell: pwsh
        run: |
            #Register additionnal repositories without credential
            $Repositories=@(
              [PsCustomObject]@{
                  name='OttoMatt'
                  publishlocation='https://www.myget.org/F/ottomatt/api/v2/package'
                  sourcelocation='https://www.myget.org/F/ottomatt/api/v2'
              }
            )
            Foreach ($Repository in $Repositories)
            {
              $Name=$Repository.Name
              try{
                  Get-PSRepository $Name -EA Stop >$null
              }catch {
                  if ($_.CategoryInfo.Category -ne 'ObjectNotFound')
                  { throw $_ }
                  else
                  {
                    $Parameters=@{
                        Name=$Name
                        SourceLocation=$Repository.SourceLocation
                        PublishLocation=$Repository.PublishLocation
                        InstallationPolicy='Trusted'
                    }
                    Write-Output "Register repository '$($Repository.Name)'"
                    Register-PSRepository @Parameters
                  }
              }
            }
            $CloudsmithRepositoryName='privatepsmodulecache'
            $CloudsmithUriLocation='https://nuget.cloudsmith.io/actionpsmodulecache/privatepsmodulecache/v2/'


             #                 -------
             #Informations is shared between steps using environment variables
            $RepositoriesAuthenticationFileName='RepositoriesCredential.Datas.ps1xml'
            echo "PSModuleCacheCredentialFileName=$RepositoriesAuthenticationFileName" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append


             #                 -------
             #Create credentials via Github secret repository
            $RepositoriesCredential=@{}
            $Credential=New-Object PSCredential('${{ secrets.CLOUDSMITHACCOUNTNAME }}',$(ConvertTo-SecureString '${{ secrets.CLOUDSMITHPASSWORD }}' -AsPlainText -Force) )
            $RepositoriesCredential.$CloudsmithRepositoryName=$Credential


             #                 -------
             #Register additionnal repositories with credential
             #Note Only PowerShellGet 3.0 knows whether or not a repo requires credentials.
            Register-PackageSource -Name $CloudsmithRepositoryName -Location $CloudsmithUriLocation -Trusted -Credential $credential -ProviderName NuGet > $null
            Register-PSRepository -Name $CloudsmithRepositoryName -SourceLocation $CloudsmithUriLocation -PublishLocation $CloudsmithUriLocation -InstallationPolicy 'trusted' -Credential $credential

             #                 -------
             #Save credential datas into the filesystem
            $RepositoriesCredential | Export-CliXml -Path (Join-Path $home -ChildPath $RepositoriesAuthenticationFileName)

      - name: Cache modules
        id: psmodulecache
        uses: ./
        with:
          modules-to-cache: EtsDateTime,OptimizationRules::,InvokeBuild
          shell: pwsh
          updatable: "true"
          UseRepositoriesWithCredential: "true"
          prefixidentifier: "true"

      - name: Get required modules on Windows PowerShell
        shell: pwsh
        run: |
              Import-Module etsdatetime
              Get-Module etsdatetime -ListAvailabLe|Select-Object Name,Version,@{Name='PreRelease';e={$_.PrivateData.PSData.Prerelease}},Modulebase,RepositorySourceLocation
              Get-Module InvokeBuild -ListAvailabLe|Select-Object Name,Version,@{Name='PreRelease';e={$_.PrivateData.PSData.Prerelease}},Modulebase,RepositorySourceLocation
              Get-Module OptimizationRules -ListAvailabLe|Select-Object Name,Version,@{Name='PreRelease';e={$_.PrivateData.PSData.Prerelease}},Modulebase,RepositorySourceLocation
